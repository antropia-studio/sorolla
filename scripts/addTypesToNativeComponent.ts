import ejs from 'ejs';
import fg from 'fast-glob';
import * as fs from 'node:fs/promises';
import * as path from 'node:path';
import invariant from 'tiny-invariant';

async function getModeTypeFile() {
  const files = await fg(path.join(__dirname, '../src/**/Mode.ts'));
  invariant(
    files.length === 1,
    `Expected to find exactly one Mode.ts file. Found ${files.length}`
  );
  return files[0]!;
}

async function getTemplateComponentFile() {
  const componentFiles = await fg(
    path.join(__dirname, '../src/**/SorollaViewNativeComponent.ets')
  );
  invariant(
    componentFiles.length === 1,
    `Expected to find exactly one SorollaViewNativeComponent.ets file. Found ${componentFiles.length}`
  );
  return componentFiles[0]!;
}

/**
 * This script adds the Mode definition in the *NativeComponent file.
 * This solves the issue with importing types from the NativeComponent file.
 *
 * @see https://github.com/facebook/react-native/issues/38769
 */
const main = async () => {
  const modeFile = await getModeTypeFile();
  const templateComponentFile = await getTemplateComponentFile();

  const modeType = await fs.readFile(modeFile, 'utf8');
  const componentFile = await ejs.renderFile(templateComponentFile, {
    disclaimer: `/**
 * DO NOT MODIFY THIS FILE DIRECTLY.
 * This file is automatically generated from a template file (*.ets) with a script.
 * To re-create this file, modify the template file and run the \`prepare:scripts\` script.
 *
 * We are using a template file because Codegen does not work with imported types.
 * @see https://github.com/facebook/react-native/issues/38769
 */`,
    modeType,
  });

  await fs.writeFile(
    templateComponentFile.replace(/\.ets$/, '.ts'),
    componentFile
  );
};

main().then();
